{% extends 'src/content/_layouts/base.njk' %}
{% set title = 'Einmaleins √ºben' %}
{% set metaDescription = 'Einfache und bew√§hrte Methode das 1x1 zu lernen.' %}

{% from 'macros.njk' import heading %}

{% block body_classes %}{{ super() }} touch-pan-x touch-pan-y{% endblock %}

{% block header %}{% endblock %}

{% block content %}
    {% set tileClass = 'w-16 h-16 bg-sky-100 dark:bg-slate-700 rounded flex items-center justify-center font-bold text-3xl' %}
    <div class="text-center" x-data="multi">
        <template x-if="status === 'finished'">
            <div>
                <h1 class="tracking-wide font-bold text-4xl dark:text-white mt-12 mb-12">
                    Das hast du ganz toll gemacht! ü•≥ üíØ
                </h1>

                <p class="text-lg mb-1">
                    Du hattest <span class="font-bold" x-text="errors"></span> Fehler.
                </p>
                <p class="text-lg">
                    Du hast <span class="font-bold" x-text="duration"></span> gebraucht.
                </p>
            </div>
        </template>
        <template x-if="status === 'playing'">
            <div>
                <h1 class="tracking-wide font-bold text-4xl dark:text-white mb-12">ü§ñ Einmaleins üíØ</h1>
                <div class="flex items-center justify-center mb-3"
                     :class="{'flex-row-reverse': Math.random() > 0.5}">
                    <div
                            class="{{ tileClass }} relative overflow-hidden !bg-cyan-400/30"
                            x-text="term[0]">
                    </div>
                    <div class="w-10 text-center text-2xl font-bold">√ó</div>
                    <div
                            class="{{ tileClass }} relative overflow-hidden !bg-pink-400/30"
                            x-text="term[1]">
                    </div>
                </div>
                <div class="text-gray-500 mb-2">
                    <span>noch</span>
                    <span x-text="decks.initial.length + decks.lost.length"></span>
                    <span>Aufgaben</span>
                </div>

                <div>
                    <input
                            class="border-2 rounded dark:border-gray-600 focus:outline-none focus:border-gray-400 dark:bg-gray-700 px-3 py-2 text-3xl text-center w-24 font-bold"
                            type="text"
                            x-model="guess"
                            autofocus
                            @keyup.enter="solve">
                </div>
                <div class="w-fit mx-auto grid grid-cols-3 grid-rows-4 gap-3 justify-items-center mt-4 sm:hidden">
                    {% for i in range(1,10) %}
                        <button
                                class="{{ tileClass }} focus:bg-gray-200"
                                @click="handleKey({{ i }})"
                        >
                            {{ i }}
                        </button>
                    {% endfor %}
                    <button
                            class="{{ tileClass }}"
                            @click="handleKey('backspace')"
                    >
                        ‚å´
                    </button>
                    <button
                            class="{{ tileClass }}"
                            @click="handleKey(0)"
                    >
                        0
                    </button>
                    <button
                            class="{{ tileClass }}"
                            @click="handleKey('enter')"
                    >
                        ‚èé
                    </button>
                </div>
                <img x-show="no"
                     x-transition
                     class="absolute left-0 bottom-0 ml-4 mb-4 w-80 h-80 object-cover rounded-full bg-red-300"
                     src="/img/ohno.png">
                <img x-show="yes"
                     x-transition
                     class="absolute left-0 bottom-0 ml-4 mb-4 w-80 h-80 object-cover rounded-full bg-green-300"
                     src="/img/ohyes.png">
            </div>
        </template>
    </div>
{% endblock %}

{% block footer %}
    <div class="flex justify-center space-x-2 items-center px-4">
        <span>made by</span> {% include 'logo.njk' %}
    </div>
{% endblock %}

{% block scripts %}
    {{ super() }}

    <script type="text/javascript">
        document.addEventListener('alpine:init', () => {
            Alpine.data('multi', () => ({
                guess: '',
                status: 'playing',
                yes: false,
                no: false,
                deck: 'initial',
                decks: {
                    initial: [],
                    won: [],
                    lost: [],
                },
                errors: 0,
                gameStart: undefined,
                gameEnd: undefined,
                index: undefined,
                init() {
                    this.generateDataSet()
                    this.randomDeckIndex()

                    this.gameStart = new Date()
                },
                solve() {
                    if (parseInt(this.guess) === this.solution) {
                        this.decks.won.push(this.currentDeck[this.index])
                        this.yes = true

                        setTimeout(() => {
                            this.yes = false
                        }, 1200)
                    } else {
                        this.errors++
                        this.decks.lost.push(this.currentDeck[this.index])
                        this.no = true

                        setTimeout(() => {
                            this.no = false
                        }, 1200)
                    }

                    this.currentDeck.splice(this.index, 1)
                    this.guess = ''

                    if (this.decks.initial.length === 0) {
                        if (this.decks.lost.length === 0) {
                            this.status = 'finished'
                            this.gameEnd = new Date()
                        } else {
                            this.deck = 'lost'
                        }
                    }

                    this.randomDeckIndex()
                },
                handleKey(key) {
                    switch (key) {
                        case 'backspace':
                            this.guess = this.guess.slice(0, -1)
                            break;
                        case 'enter':
                            this.solve()
                            break;
                        default:
                            this.guess += key
                    }
                },
                randomDeckIndex() {
                    this.index = Math.floor(Math.random() * this.currentDeck.length)
                },
                generateDataSet() {
                    let i = 2
                    let j = 2
                    while (i <= 9) {
                        while (j <= 9) {
                            this.decks.initial.push(`${i}x${j}`)
                            j++
                        }
                        i++
                        j = i
                    }
                },
                get term() {
                    return this.currentDeck[this.index]?.split('x') ?? [null, null]
                },
                get solution() {
                    return this.term[0] * this.term[1]
                },
                get currentDeck() {
                    return this.decks[this.deck]
                },
                get duration() {
                    if (!this.gameStart || !this.gameEnd) {
                        return
                    }

                    let time = (this.gameEnd - this.gameStart) / 1000

                    let minutes = Math.floor(time / 60)
                    let seconds = Math.floor(time % 60)

                    return `${minutes} Minuten und ${seconds} Sekunden`
                }
            }))
        })
    </script>
{% endblock %}
